/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Aluguel } from '../models/aluguel';
import { atualizarAluguel } from '../fn/aluguel-controller/atualizar-aluguel';
import { AtualizarAluguel$Params } from '../fn/aluguel-controller/atualizar-aluguel';
import { criarAluguel } from '../fn/aluguel-controller/criar-aluguel';
import { CriarAluguel$Params } from '../fn/aluguel-controller/criar-aluguel';
import { deletarAluguel } from '../fn/aluguel-controller/deletar-aluguel';
import { DeletarAluguel$Params } from '../fn/aluguel-controller/deletar-aluguel';
import { finalizarAluguel } from '../fn/aluguel-controller/finalizar-aluguel';
import { FinalizarAluguel$Params } from '../fn/aluguel-controller/finalizar-aluguel';
import { getAlugueis } from '../fn/aluguel-controller/get-alugueis';
import { GetAlugueis$Params } from '../fn/aluguel-controller/get-alugueis';
import { getAluguelPorId } from '../fn/aluguel-controller/get-aluguel-por-id';
import { GetAluguelPorId$Params } from '../fn/aluguel-controller/get-aluguel-por-id';

@Injectable({ providedIn: 'root' })
export class AluguelControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAluguelPorId()` */
  static readonly GetAluguelPorIdPath = '/api/alugueis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAluguelPorId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAluguelPorId$Response(params: GetAluguelPorId$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return getAluguelPorId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAluguelPorId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAluguelPorId(params: GetAluguelPorId$Params, context?: HttpContext): Observable<Aluguel> {
    return this.getAluguelPorId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  /** Path part for operation `atualizarAluguel()` */
  static readonly AtualizarAluguelPath = '/api/alugueis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `atualizarAluguel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarAluguel$Response(params: AtualizarAluguel$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return atualizarAluguel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `atualizarAluguel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarAluguel(params: AtualizarAluguel$Params, context?: HttpContext): Observable<Aluguel> {
    return this.atualizarAluguel$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  /** Path part for operation `deletarAluguel()` */
  static readonly DeletarAluguelPath = '/api/alugueis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletarAluguel()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletarAluguel$Response(params: DeletarAluguel$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletarAluguel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletarAluguel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletarAluguel(params: DeletarAluguel$Params, context?: HttpContext): Observable<void> {
    return this.deletarAluguel$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAlugueis()` */
  static readonly GetAlugueisPath = '/api/alugueis';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAlugueis()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAlugueis$Response(params?: GetAlugueis$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Aluguel>>> {
    return getAlugueis(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAlugueis$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAlugueis(params?: GetAlugueis$Params, context?: HttpContext): Observable<Array<Aluguel>> {
    return this.getAlugueis$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Aluguel>>): Array<Aluguel> => r.body)
    );
  }

  /** Path part for operation `criarAluguel()` */
  static readonly CriarAluguelPath = '/api/alugueis';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `criarAluguel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criarAluguel$Response(params: CriarAluguel$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return criarAluguel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `criarAluguel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criarAluguel(params: CriarAluguel$Params, context?: HttpContext): Observable<Aluguel> {
    return this.criarAluguel$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  /** Path part for operation `finalizarAluguel()` */
  static readonly FinalizarAluguelPath = '/api/alugueis/{id}/finalizar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `finalizarAluguel()` instead.
   *
   * This method doesn't expect any request body.
   */
  finalizarAluguel$Response(params: FinalizarAluguel$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return finalizarAluguel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `finalizarAluguel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  finalizarAluguel(params: FinalizarAluguel$Params, context?: HttpContext): Observable<Aluguel> {
    return this.finalizarAluguel$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

}
