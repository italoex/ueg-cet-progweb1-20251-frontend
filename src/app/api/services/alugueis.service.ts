/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Aluguel } from '../models/aluguel';
import { apiAlugueisGet } from '../fn/alugueis/api-alugueis-get';
import { ApiAlugueisGet$Params } from '../fn/alugueis/api-alugueis-get';
import { apiAlugueisIdDelete } from '../fn/alugueis/api-alugueis-id-delete';
import { ApiAlugueisIdDelete$Params } from '../fn/alugueis/api-alugueis-id-delete';
import { apiAlugueisIdFinalizarPatch } from '../fn/alugueis/api-alugueis-id-finalizar-patch';
import { ApiAlugueisIdFinalizarPatch$Params } from '../fn/alugueis/api-alugueis-id-finalizar-patch';
import { apiAlugueisIdGet } from '../fn/alugueis/api-alugueis-id-get';
import { ApiAlugueisIdGet$Params } from '../fn/alugueis/api-alugueis-id-get';
import { apiAlugueisIdPut } from '../fn/alugueis/api-alugueis-id-put';
import { ApiAlugueisIdPut$Params } from '../fn/alugueis/api-alugueis-id-put';
import { apiAlugueisPost } from '../fn/alugueis/api-alugueis-post';
import { ApiAlugueisPost$Params } from '../fn/alugueis/api-alugueis-post';

@Injectable({ providedIn: 'root' })
export class AlugueisService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  static readonly ApiAlugueisGetPath = '/api/alugueis';

  apiAlugueisGet$Response(params?: ApiAlugueisGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Aluguel>>> {
    return apiAlugueisGet(this.http, this.rootUrl, params, context);
  }

  apiAlugueisGet(params?: ApiAlugueisGet$Params, context?: HttpContext): Observable<Array<Aluguel>> {
    return this.apiAlugueisGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Aluguel>>): Array<Aluguel> => r.body)
    );
  }

  static readonly ApiAlugueisPostPath = '/api/alugueis';

  apiAlugueisPost$Response(params: ApiAlugueisPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return apiAlugueisPost(this.http, this.rootUrl, params, context);
  }

  apiAlugueisPost(params: ApiAlugueisPost$Params, context?: HttpContext): Observable<Aluguel> {
    return this.apiAlugueisPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  static readonly ApiAlugueisIdGetPath = '/api/alugueis/{id}';

  apiAlugueisIdGet$Response(params: ApiAlugueisIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return apiAlugueisIdGet(this.http, this.rootUrl, params, context);
  }

  apiAlugueisIdGet(params: ApiAlugueisIdGet$Params, context?: HttpContext): Observable<Aluguel> {
    return this.apiAlugueisIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  static readonly ApiAlugueisIdPutPath = '/api/alugueis/{id}';

  apiAlugueisIdPut$Response(params: ApiAlugueisIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return apiAlugueisIdPut(this.http, this.rootUrl, params, context);
  }

  apiAlugueisIdPut(params: ApiAlugueisIdPut$Params, context?: HttpContext): Observable<Aluguel> {
    return this.apiAlugueisIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

  static readonly ApiAlugueisIdDeletePath = '/api/alugueis/{id}';

  apiAlugueisIdDelete$Response(params: ApiAlugueisIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAlugueisIdDelete(this.http, this.rootUrl, params, context);
  }

  apiAlugueisIdDelete(params: ApiAlugueisIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiAlugueisIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  static readonly ApiAlugueisIdFinalizarPatchPath = '/api/alugueis/{id}/finalizar';

  apiAlugueisIdFinalizarPatch$Response(params: ApiAlugueisIdFinalizarPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<Aluguel>> {
    return apiAlugueisIdFinalizarPatch(this.http, this.rootUrl, params, context);
  }

  apiAlugueisIdFinalizarPatch(params: ApiAlugueisIdFinalizarPatch$Params, context?: HttpContext): Observable<Aluguel> {
    return this.apiAlugueisIdFinalizarPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<Aluguel>): Aluguel => r.body)
    );
  }

}
